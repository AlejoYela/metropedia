---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Metropedia">
  <section class="flex justify-center items-center h-dvh">
    <form class="max-w-2xl mx-auto">
      <h2 class="mb-2 text-lg font-semibold text-neutral-900 dark:text-white">
        Hola <span id="saludo" class="text-[#ffd16f]"></span>, espere un
        momento.
      </h2>
      <p class="text-[#9a9a9a] font-semibold mb-5">
        Estamos autenticando su identidad.
      </p>
      <ul
        class="max-w-md space-y-2 text-neutral-500 list-inside dark:text-neutral-400"
      >
        <li class="flex items-center">
          <svg
            class="w-4 h-4 me-2 text-green-500 dark:text-green-400 flex-shrink-0"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"
            ></path>
          </svg>
          Comprobando sus datos
        </li>
        <li class="flex items-center">
          <svg
            class="w-4 h-4 me-2 text-green-500 dark:text-green-400 flex-shrink-0"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"
            ></path>
          </svg>
          Verificando sus cursos
        </li>
        <li class="flex items-center">
          <div role="status">
            <svg
              aria-hidden="true"
              class="w-4 h-4 me-2 text-neutral-200 animate-spin dark:text-neutral-600 fill-primary"
              viewBox="0 0 100 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              ><path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor"></path><path
                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                fill="currentFill"></path></svg
            >
            <span class="sr-only">Loading...</span>
          </div>
          Redirigiendo
        </li>
      </ul>
    </form>
  </section>

  <script>
    import { createAuth0Client } from "@auth0/auth0-spa-js";

    let auth0Client = null;

    async function configureAuth0() {
      // Configurar Auth0 Client
      auth0Client = await createAuth0Client({
        domain: "dev-6tbiy7tc5eqhqb7k.us.auth0.com", // Tu dominio de Auth0
        clientId: "JozbrwbE60QoHfD6hZiQy18zIQFxGEw0", // Tu Client ID
        authorizationParams: {
          scope: "openid profile email", // Solicitar los permisos necesarios
        },
      });
    }

    async function getUserData() {
      try {
        if (!auth0Client) {
          // Si Auth0 aún no ha sido configurado, hacerlo
          await configureAuth0();
        }

        // Si ya estamos autenticados, obtenemos el token silenciosamente
        const accessToken = await auth0Client.getTokenSilently();

        if (!accessToken) {
          throw new Error("No se pudo obtener el token de acceso.");
        }

        console.log("access token: ", accessToken);

        // Obtener los datos del usuario con el token de acceso
        const userInfoResponse = await fetch(
          "https://dev-6tbiy7tc5eqhqb7k.us.auth0.com/userinfo",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${accessToken}`, // Usamos el token como Bearer
            },
          },
        );

        if (!userInfoResponse.ok) {
          throw new Error("Error al obtener los datos del usuario.");
        }

        const userData = await userInfoResponse.json();
        console.log("Datos del usuario:", userData);
        document.getElementById("saludo").textContent = userData.given_name;

        // Ahora que tenemos el correo electrónico, hacer un fetch al segundo backend
        const backendResponse = await fetch(
          `https://certificados-backend.onrender.com/api/user/${userData.email}`,
        );

        if (!backendResponse.ok) {
          throw new Error("Error al obtener los datos del backend.");
        }

        const backendData = await backendResponse.json();
        console.log("Datos del backend:", backendData);

        // Aquí se hace el post para registrar en mongo también
        try {
          const registerResponse = await fetch(
            "http://certificados-backend.onrender.com/api/auth/register",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: `${userData.given_name} ${userData.family_name}`,
                id: backendData.id, // Usamos el id del backend
                email: userData.email,
                password: backendData.id, // También usamos el id como password
              }),
            },
          );

          if (!registerResponse.ok) {
            throw new Error("Error al registrar al usuario.");
          }

          const registerData = await registerResponse.json();
          console.log("Usuario registrado:", registerData);
        } catch (error) {
          console.error("Error al registrar al usuario:", error);
        }
        // document.getElementById("user-backend-data").textContent = JSON.stringify(backendData, null, 2);
        localStorage.setItem("userData", JSON.stringify(userData));
        window.location.href = `/campus/${backendData.id}`;
      } catch (error) {
        console.error("Error al obtener los datos del usuario:", error);
      }
    }

    // Llamar a la función para obtener los datos del usuario al cargar la página.
    getUserData();
  </script>

  <div id="user-data"></div>

  <style>
    .about {
      margin: auto;
      color: white;
      line-height: 1.6;
    }

    .metropedia {
      -webkit-mask-image: linear-gradient(
          to right,
          transparent,
          black 30%,
          black 70%,
          transparent
        ),
        linear-gradient(to left, transparent, black 30%, black 70%, transparent);
      mask-image: linear-gradient(
          to right,
          transparent,
          black 30%,
          black 70%,
          transparent
        ),
        linear-gradient(to left, transparent, black 30%, black 70%, transparent);
    }

    .titulo {
      font-family: "Questrial", system-ui, sans-serif;
    }

    @keyframes bounce {
      0%,
      100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-10px);
      }
    }

    .bounce {
      animation: bounce 1s infinite;
    }
  </style>
</Layout>
