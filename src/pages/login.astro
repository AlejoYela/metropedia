---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Metropedia">
  <section class="flex justify-center items-center h-dvh">
    <form class="max-w-md mx-auto">
      <p class="text-white font-semibold text-xl">
        Hola, Registre su número de cédula.
      </p>
      <div class="relative z-0 w-full mb-5 group">
        <input
          type="number"
          name="floating_id"
          id="floating_id"
          class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-primary focus:outline-none focus:ring-0 focus:border-primary peer"
          placeholder=" "
          required
        />
        <label
          for="floating_id"
          class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-primary peer-focus:dark:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
        >
          Número de cédula
        </label>
      </div>
    </form>
    <button id="login">Click to Login</button>

    <!-- Contenedor para mostrar el código -->
    <div id="code-display" class="text-white mt-5">
      <p><strong>Code:</strong> <span id="code"></span></p>
    </div>

    <!-- Contenedor para mostrar el token -->
    <div id="token-display" class="text-white mt-5">
      <p><strong>Token:</strong> <span id="token"></span></p>
    </div>
  </section>
</Layout>

<script>
  import { createAuth0Client } from "@auth0/auth0-spa-js";

  async function configureAuth0() {
    const auth0 = await createAuth0Client({
      domain: "dev-6tbiy7tc5eqhqb7k.us.auth0.com",
      clientId: "JozbrwbE60QoHfD6hZiQy18zIQFxGEw0",
      authorizationParams: {
        scope: "openid profile email",
        redirect_uri: window.location.origin + "/login", // Define la URL de redirección
      },
    });
    return auth0;
  }

  const auth0 = await configureAuth0();

  // Función para manejar la autenticación
  async function checkLogin() {
    try {
      // Detectamos si hay un `code` en la URL (lo que indica una redirección de Auth0)
      const urlSearchParams = new URLSearchParams(window.location.search);
      const code = urlSearchParams.get("code");

      if (code) {
        // Si ya existe un `code`, significa que estamos en el callback
        await auth0.handleRedirectCallback();
        window.history.replaceState({}, document.title, "/login"); // Limpia el código de la URL
      } else {
        // Si no hay `code`, revisa si el usuario ya está autenticado
        const isAuthenticated = await auth0.isAuthenticated();
        if (!isAuthenticated) {
          // Si no está autenticado, inicia el login
          await auth0.loginWithRedirect();
        }
      }
    } catch (error) {
      console.error("Error en el proceso de login:", error);
    }
  }

  // Ejecutar la función checkLogin para iniciar la autenticación solo cuando sea necesario
  checkLogin();

  // Función para obtener los datos del usuario después de la autenticación
  async function getUserData() {
    try {
      const ACCESS_TOKEN = await auth0.getTokenSilently();

      if (!ACCESS_TOKEN) {
        throw new Error("Token no disponible");
      }

      const responseUser = await fetch(
        "https://dev-6tbiy7tc5eqhqb7k.us.auth0.com/userinfo",
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${ACCESS_TOKEN}`,
          },
        },
      );

      if (!responseUser.ok) {
        throw new Error("Error al obtener los datos del usuario");
      }

      const dataUser = await responseUser.json();
      console.log("Datos del usuario:", JSON.stringify(dataUser, null, 2));

      return dataUser;
    } catch (error) {
      console.error("Error:", error);
      return null;
    }
  }

  // Llamar a getUserData si el usuario ya está autenticado
  auth0.isAuthenticated().then((isAuthenticated) => {
    if (isAuthenticated) {
      getUserData();
    }
  });
</script>


<style>
  .about {
    margin: auto;
    color: white;
    line-height: 1.6;
  }

  .metropedia {
    -webkit-mask-image: linear-gradient(
        to right,
        transparent,
        black 30%,
        black 70%,
        transparent
      ),
      linear-gradient(to left, transparent, black 30%, black 70%, transparent);
    mask-image: linear-gradient(
        to right,
        transparent,
        black 30%,
        black 70%,
        transparent
      ),
      linear-gradient(to left, transparent, black 30%, black 70%, transparent);
  }

  .titulo {
    font-family: "Questrial", system-ui, sans-serif;
  }

  @keyframes bounce {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .bounce {
    animation: bounce 1s infinite;
  }
</style>
