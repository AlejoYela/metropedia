---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Metropedia">
  <section class="flex justify-center items-center h-dvh">
    <form class="max-w-md mx-auto">
      <p class="text-white font-semibold text-xl">
        Hola, Registre su número de cédula.
      </p>
      <p class="text-[#9a9a9a] font-bold mb-5">
        Éste se usará en su certificado.
      </p>
      <div class="relative z-0 w-full mb-5 group">
        <input
          type="number"
          name="floating_id"
          id="floating_id"
          class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-primary focus:outline-none focus:ring-0 focus:border-primary peer"
          placeholder=" "
          required
        />
        <label
          for="floating_id"
          class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-primary peer-focus:dark:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
        >
          Número de cédula
        </label>
      </div>

      <button
        type="submit"
        class="text-secondary bg-primary hover:bg-primary focus:ring-4 focus:outline-none focus:ring-primary font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-primary dark:hover:bg-primary dark:focus:ring-primary"
      >
        Registrar
      </button>
    </form>

    <!-- Contenedor para mostrar el código -->
    <div id="code-display" class="text-white mt-5">
      <p><strong>Code:</strong> <span id="code"></span></p>
    </div>

    <!-- Contenedor para mostrar el token -->
    <div id="token-display" class="text-white mt-5">
      <p><strong>Token:</strong> <span id="token"></span></p>
    </div>
  </section>
</Layout>

<script>
  const urlSearchParams = new URLSearchParams(window.location.search);
  const code = urlSearchParams.get("code"); // Extraemos el código
  console.log(code); // Ver en consola

  // Mostrar el valor de 'code' en el HTML
  document.getElementById("code").textContent = code;

  // Función para obtener el token
  // Función para obtener el token
  // Función para obtener el token y luego los datos del usuario en un solo flujo
  async function getUserData(code) {
    try {
      console.log("Making request with code:", code); // Verificar que la función se llama con el 'code'

      // Primero, obtenemos el token
      const responseToken = await fetch(
        `https://certificados-backend.onrender.com/auth/token/${code}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        },
      );

      console.log("Response status for token:", responseToken.status); // Verificar el estado de la respuesta del token

      if (!responseToken.ok) {
        throw new Error("Error al obtener el token");
      }

      // Parseamos el JSON de la respuesta del token
      const dataToken = await responseToken.json();

      // Extraemos el token de la respuesta
      const ACCESS_TOKEN = dataToken.access_token;

      console.log("Token obtenido:", ACCESS_TOKEN); // Verificar que se obtuvo el token

      if (!ACCESS_TOKEN) {
        throw new Error("Token no disponible");
      }

      // Ahora, con el token, hacemos el segundo fetch para obtener los datos del usuario
      const responseUser = await fetch(
        "https://dev-6tbiy7tc5eqhqb7k.us.auth0.com/userinfo",
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${ACCESS_TOKEN}`, // Usamos el token como Bearer
          },
        },
      );

      console.log("Response status for user data:", responseUser.status); // Verificar el estado de la respuesta del usuario

      if (!responseUser.ok) {
        throw new Error("Error al obtener los datos del usuario");
      }

      // Parseamos el JSON de la respuesta del usuario
      const dataUser = await responseUser.json();

      // Mostrar los datos del usuario de forma legible
      console.log(
        "Resultado del fetch (user data):",
        JSON.stringify(dataUser, null, 2),
      );

      return dataUser;
    } catch (error) {
      console.error("Error:", error);
      document.getElementById("token").textContent =
        "Hubo un error al obtener los datos.";
      return null;
    }
  }

  // Llamamos a la función con el 'code' que obtenemos de la URL
  if (code) {
    const userData = await getUserData(code); // Solo llamamos a la función una vez
    console.log("userData: ", JSON.stringify(userData, null, 2)); // Visualización mejorada
  }
</script>

<style>
  .about {
    margin: auto;
    color: white;
    line-height: 1.6;
  }

  .metropedia {
    -webkit-mask-image: linear-gradient(
        to right,
        transparent,
        black 30%,
        black 70%,
        transparent
      ),
      linear-gradient(to left, transparent, black 30%, black 70%, transparent);
    mask-image: linear-gradient(
        to right,
        transparent,
        black 30%,
        black 70%,
        transparent
      ),
      linear-gradient(to left, transparent, black 30%, black 70%, transparent);
  }

  .titulo {
    font-family: "Questrial", system-ui, sans-serif;
  }

  @keyframes bounce {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .bounce {
    animation: bounce 1s infinite;
  }
</style>
