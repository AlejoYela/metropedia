---
const {} = Astro.props;
import GraphicIcon from "../icons/GraphicIcon.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Metropedia.">
    <div
        class="graficas relative about flex flex-col justify-center items-center gap-12 pt-36"
    >
        <div class="flex">
            <GraphicIcon class="size-10 mr-2 stroke-[#fcb316]" />
            <h3 class="text-4xl font-extrabold">
                Corrección de <span class="text-primary"
                    >Condiciones ambientales</span
                >
            </h3>
        </div>
        <p class="text-xl text-white/50">
            Calcula la corrección de las mediciones de tus condiciones
            ambientales para simular ambientes ideales en servicios externos.
        </p>

        <form
            id="correction-form"
            class="max-w-screen-xl w-full border border-primary/80 rounded-sm p-12"
        >
            <p class="text-white/40 text-sm mb-6 w-full flex justify-center">
                Ingresa los datos de lectura del instrumento y referencia del
                patrón presentes en el certificado de tu instrumento de
                monitoreo.
            </p>

            <div class="relative overflow-x-auto shadow-md sm:rounded-sm my-6">
                <table
                    class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
                >
                    <thead
                        class="text-xs text-gray-700 uppercase dark:text-gray-400"
                    >
                        <tr>
                            <th
                                scope="col"
                                class="px-6 py-3 bg-gray-50 dark:bg-[#49494a]/50"
                            >
                                Lectura del instrumento
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Referencia del patrón
                            </th>
                        </tr>
                    </thead>
                    <tbody id="data-table-body">
                        <tr
                            class="border-b border-gray-200 dark:border-primary"
                        >
                            <th
                                scope="row"
                                class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap bg-gray-50 dark:text-white dark:bg-[#49494a]/50"
                            >
                                <input
                                    type="text"
                                    aria-describedby="helper-text-explanation"
                                    class="bg-gray-50 text-gray-900 text-sm rounded-sm focus:ring-primary focus:border-primary block w-full p-2.5 dark:bg-transparent dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary dark:focus:border-primary"
                                    placeholder="0"
                                />
                            </th>
                            <td class="px-6 py-4">
                                <input
                                    type="text"
                                    aria-describedby="helper-text-explanation"
                                    class="bg-transparent text-gray-900 text-sm rounded-sm focus:ring-primary focus:border-primary block w-full p-2.5 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary dark:focus:border-primary"
                                    placeholder="0"
                                />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="flex justify-between">
                <button
                    type="submit"
                    class="text-[#252627] bg-primary hover:bg-primary/30 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-sm text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-primary dark:hover:bg-primary/30 dark:focus:ring-white mb-4"
                    >Procesar datos de entrada</button
                >
                <button
                    id="add-row"
                    type="button"
                    class="text-[#252627] bg-primary hover:bg-primary/30 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-sm text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-primary dark:hover:bg-primary/30 dark:focus:ring-white mb-4"
                    >+</button
                >
            </div>

            <div
                id="equations-div"
                class="hidden gap-6 mb-6 md:grid-cols-1 bg-[#49494a]/50 p-6 rounded-sm"
            >
                <div>
                    <label
                        id="equations-label"
                        for="equations"
                        class="block mb-6 text-sm font-medium text-gray-900 dark:text-white"
                        >Ecuaciones de regresión evaluadas:</label
                    >
                    <div
                        id="equations"
                        class="flex justify-center gap-24 font-extrabold"
                    >
                        <div class="flex flex-col justify-center items-center">
                            <p
                                id="linear"
                                class="text-white p-3 rounded-sm mb-2"
                            >
                                0
                            </p>
                            <label class="font-normal text-sm" for="linear"
                                >Ecuación lineal</label
                            >
                        </div>
                        <div class="flex flex-col justify-center items-center">
                            <p
                                id="quadratic"
                                class="text-white p-3 rounded-sm mb-2"
                            >
                                0
                            </p>
                            <label class="font-normal text-sm" for="quadratic"
                                >Ecuación cuadrática</label
                            >
                        </div>
                        <div class="flex flex-col justify-center items-center">
                            <p
                                id="cubic"
                                class="text-white p-3 rounded-sm mb-2"
                            >
                                0
                            </p>
                            <label class="font-normal text-sm" for="cubic"
                                >Ecuación cúbica</label
                            >
                        </div>
                    </div>
                </div>
            </div>
            <p class="hidden" id="mensaje">
                La mejor regresión global es la <span
                    class="text-green-500 font-extrabold">Lineal</span
                >
            </p>
            <div id="chart-container"></div>
            <p
                class="hidden mt-12 border rounded-sm p-6 backdrop-blur-lg"
                id="mensaje2"
            >
                hidden
            </p>
        </form>
    </div>
</Layout>

<script>
    import regression from "regression";
    import { Chart, registerables } from "chart.js";
    import annotationPlugin from "chartjs-plugin-annotation";

    Chart.register(...registerables);
    Chart.register(annotationPlugin);

    const form = document.getElementById("correction-form");

    function addRow() {
        const tableBody = document.getElementById("data-table-body");
        const newRow = document.createElement("tr");
        newRow.classList.add(
            "border-b",
            "border-gray-200",
            "dark:border-primary",
        );
        newRow.innerHTML = `
        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap bg-gray-50 dark:text-white dark:bg-[#49494a]/50">
            <input type="text" aria-describedby="helper-text-explanation" class="bg-gray-50 text-gray-900 text-sm rounded-sm focus:ring-primary focus:border-primary block w-full p-2.5 dark:bg-transparent dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary dark:focus:border-primary" placeholder="0" />
        </th>
        <td class="px-6 py-4">
            <input type="text" aria-describedby="helper-text-explanation" class="bg-transparent text-gray-900 text-sm rounded-sm focus:ring-primary focus:border-primary block w-full p-2.5 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary dark:focus:border-primary" placeholder="0" />
        </td>
    `;
        tableBody.appendChild(newRow);
    }

    document.getElementById("add-row").addEventListener("click", addRow);

    form.addEventListener("submit", function (event) {
        event.preventDefault();
        const rows = document.querySelectorAll("#data-table-body tr");
        const lectura = [];
        const referencia = [];

        rows.forEach((row) => {
            const inputs = row.querySelectorAll("input");
            lectura.push(parseFloat(inputs[0].value));
            referencia.push(parseFloat(inputs[1].value));
        });

        const data = lectura.map((x, i) => [x, referencia[i]]);

        // Calcular regresión lineal
        const linearResult = regression.linear(data);
        const linearPredict = (x) => linearResult.predict(x)[1];

        // Calcular regresión polinómica de grado 2
        const poly2Result = regression.polynomial(data, { order: 2 });
        const poly2Predict = (x) => poly2Result.predict(x)[1];

        // Calcular regresión polinómica de grado 3
        const poly3Result = regression.polynomial(data, { order: 3 });
        const poly3Predict = (x) => poly3Result.predict(x)[1];

        // Contadores para cada tipo de regresión
        let countLineal = 0;
        let countPolinomial2 = 0;
        let countPolinomial3 = 0;

        // Evaluar cada lectura con las tres fórmulas y almacenar los datos
        const results = lectura.map((x, i) => {
            const ref = referencia[i];
            const lineal = linearPredict(x);
            const polinomial2 = poly2Predict(x);
            const polinomial3 = poly3Predict(x);

            // Calcular errores
            const errorLineal = Math.abs(ref - lineal);
            const errorPolinomial2 = Math.abs(ref - polinomial2);
            const errorPolinomial3 = Math.abs(ref - polinomial3);

            // Determinar la regresión con menor error
            const minError = Math.min(
                errorLineal,
                errorPolinomial2,
                errorPolinomial3,
            );
            let mejorRegresion = "";
            if (minError === errorLineal) {
                mejorRegresion = "lineal";
                countLineal++;
            } else if (minError === errorPolinomial2) {
                mejorRegresion = "polinomial2";
                countPolinomial2++;
            } else {
                mejorRegresion = "polinomial3";
                countPolinomial3++;
            }

            return {
                lectura: x,
                lineal,
                polinomial2,
                polinomial3,
                errorLineal,
                errorPolinomial2,
                errorPolinomial3,
                mejorRegresion,
            };
        });

        // Determinar la mejor regresión basada en la mayoría de medidas
        let mejorRegresionGlobal = "";
        if (countLineal > countPolinomial2 && countLineal > countPolinomial3) {
            mejorRegresionGlobal = "lineal";
        } else if (
            countPolinomial2 > countLineal &&
            countPolinomial2 > countPolinomial3
        ) {
            mejorRegresionGlobal = "polinomial2";
        } else if (
            countPolinomial3 > countLineal &&
            countPolinomial3 > countPolinomial2
        ) {
            mejorRegresionGlobal = "polinomial3";
        } else {
            mejorRegresionGlobal = "Empate entre regresiones"; // Caso de empate
        }

        // Imprimir los resultados
        console.log("Resultados de predicción:");
        results.forEach((result) => {
            console.log(
                `Lectura: ${result.lectura}, Lineal: ${result.lineal}, Polinomial Grado 2: ${result.polinomial2}, Polinomial Grado 3: ${result.polinomial3}`,
            );
            console.log(
                `Errores -> Lineal: ${result.errorLineal}, Polinomial Grado 2: ${result.errorPolinomial2}, Polinomial Grado 3: ${result.errorPolinomial3}`,
            );
            console.log(`Mejor regresión: ${result.mejorRegresion}`);
        });

        // Imprimir la mejor regresión global
        console.log(`La mejor regresión global es: ${mejorRegresionGlobal}`);

        console.log("Linear result", linearResult);

        const chartContainer = document.getElementById("chart-container");
        const canvas = document.createElement("canvas");
        const mensaje = document.getElementById("mensaje");
        const mensaje2 = document.getElementById("mensaje2");
        const equationsDiv = document.getElementById("equations-div");
        const linearEquation = document.getElementById("linear");
        const quadraticEquation = document.getElementById("quadratic");
        const cubicEquation = document.getElementById("cubic");

        const texto1 =
            'Un ajuste <span class="text-green-500 font-extrabold">lineal</span> es adecuado cuando los datos siguen una tendencia constante y uniforme. Es el modelo más simple y fácil de interpretar, sugiriendo que no hay interacciones complejas o no lineales en los datos. En el contexto de calibración, esto podría significar que el instrumento está funcionando de manera consistente en todo el rango de mediciones.';
        const texto2 =
            'Un ajuste <span class="text-green-500 font-extrabold">cuadrático</span> es útil cuando los datos muestran una tendencia que no es lineal pero aún relativamente simple. Puede capturar variaciones que una regresión lineal no puede, como un aumento o disminución en la sensibilidad del instrumento en ciertos rangos de medición. Esto podría implicar que el instrumento tiene un rendimiento óptimo o una desviación sistemática en ciertas condiciones.';
        const texto3 =
            'Un ajuste <span class="text-green-500 font-extrabold">cúbico</span> es adecuado cuando los datos presentan una relación intrincada que no puede ser capturada por modelos lineales o cuadráticos. Este tipo de regresión puede modelar fluctuaciones y cambios abruptos en la tendencia, indicando que el instrumento podría estar respondiendo de manera no lineal a diferentes condiciones de medición. Esto puede ser útil para identificar y corregir comportamientos anómalos en el instrumento.';

        chartContainer.appendChild(canvas);

        mensaje.className = "block my-12 text-xl flex justify-center";
        mensaje.innerHTML = `¡ La mejor regresión global es la&nbsp<span class="text-green-500 font-extrabold text-xl">${mejorRegresionGlobal}</span>&nbsp!`;

        mensaje2.className =
            "block mt-12 border rounded-sm p-6 backdrop-blur-lg";
        mensaje2.innerHTML =
            mejorRegresionGlobal == "lineal"
                ? texto1
                : mejorRegresionGlobal == "polinomial2"
                  ? texto2
                  : texto3;

        equationsDiv.className =
            "grid gap-6 mb-6 md:grid-cols-1 bg-[#49494a]/50 p-6 rounded-sm";

        linearEquation.innerHTML = linearResult.string;
        quadraticEquation.innerHTML = poly2Result.string;
        cubicEquation.innerHTML = poly3Result.string;

        if (mejorRegresionGlobal === "lineal") {
            linearEquation.className =
                "text-green-500 border p-3 rounded-sm mb-2";
        } else if (mejorRegresionGlobal === "polinomial2") {
            quadraticEquation.className =
                "text-green-500 border p-3 rounded-sm mb-2";
        } else {
            cubicEquation.className =
                "text-green-500 border p-3 rounded-sm mb-2";
        }

        const linealRegressionGraphic = linearResult.points.map((point) => ({
            x: point[0],
            y: point[1],
        }));
        const quadraticRegressionGraphic = poly2Result.points.map((point) => ({
            x: point[0],
            y: point[1],
        }));
        const cubicRegressionGraphic = poly3Result.points.map((point) => ({
            x: point[0],
            y: point[1],
        }));

        const dataGrafico = {
            datasets: [
                {
                    type: "scatter",
                    label: "Datos de Referencia",
                    data: data,
                    backgroundColor: "#55a7ef",
                },
                {
                    type: "line",
                    label: `Regresión ${mejorRegresionGlobal}`,
                    data:
                        mejorRegresionGlobal == "lineal"
                            ? linealRegressionGraphic
                            : mejorRegresionGlobal == "polinomial2"
                              ? quadraticRegressionGraphic
                              : cubicRegressionGraphic,
                    backgroundColor: "#e05b59",
                    borderColor: "#e05b59",
                },
            ],
            labels: ["January", "February", "March", "April"],
        };

        const options = {
            scales: {
                y: {
                    beginAtZero: true,
                },
            },
            plugins: {
                annotation: {
                    annotations: {
                        label1: {
                            type: "label",

                            yValue: 2,
                            color: "#ffffff",
                            content: [
                                mejorRegresionGlobal == "lineal"
                                    ? linearResult.string
                                    : mejorRegresionGlobal == "polinomial2"
                                      ? poly2Result.string
                                      : poly3Result.string,
                            ],
                            font: {
                                size: 18,
                            },
                        },
                    },
                },
            },
        };

        new Chart(canvas, {
            data: dataGrafico,
            options: options,
        });
    });
</script>

<style>
    .graficas {
        margin: auto;
        color: white;
        line-height: 1.6;
    }

    @keyframes bounce {
        0%,
        100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-10px);
        }
    }
    .bounce {
        animation: bounce 1s infinite;
    }
</style>
